%! Package = palettize-getitems
%! Author = Jander Moreira
%! Date = 2024

\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{palettize-getitems}[2024/07/24 v0.1 Process itemized lists.]

\RequirePackage{etoolbox}

% %! parser=off
% \ifcsundef{plt@GetItems}{
%     \endinput
% }{
%     ERRO
% }
% %! parser = on


%% Code

\ExplSyntaxOn

% PLTParseItem: check if for \item optional arguments (<> for beamer
%   overlays and [] to replace default bullet)
%   Detection code: A = angle brackets <> ; B = brackets; N = nothing
% #1: a macro to store the detection code: A, B, AB or N
% #2: a macro to store overlay specifications -- <>
% #3: a macro to store option options specifications -- []
% #4: a macro to store the body only tokens
% #5: the full contents of the item
\ExplSyntaxOn
\cs_new:Npn \gather_item_parts:NNNNn #1#2#3#4#5 {
    % Clear all output macros
    \tl_clear_new:N #1
    \tl_clear_new:N #2
    \tl_clear_new:N #3
    \tl_clear_new:N #4

    % Check for [] and <> options
    \regex_extract_once:nnNTF { \A\s*<(.*?)>\s*\[(.*?)\]\s*(.*) } { #5 } \g_item_structure_seq { % <> and []
        \tl_set:Nn #1 { AB }
        \tl_set:Nn #2 { \seq_item:Nn \g_item_structure_seq { 2 } }
        \tl_set:Nn #3 { \seq_item:Nn \g_item_structure_seq { 3 } }
        \tl_set:Nn #4 { \seq_item:Nn \g_item_structure_seq { 4 } }
    } {
        \regex_extract_once:nnNTF { \A\s*\[(.*?)\]\s*<(.*?)>\s*(.*) } { #5 } \g_item_structure_seq { % [] and <>
            \tl_set:Nn #1 { AB }
            \tl_set:Nn #2 { \seq_item:Nn \g_item_structure_seq { 3 } }
            \tl_set:Nn #3 { \seq_item:Nn \g_item_structure_seq { 2 } }
            \tl_set:Nn #4 { \seq_item:Nn \g_item_structure_seq { 4 } }
        } {
            \regex_extract_once:nnNTF { \A\s*<(.*?)>\s*(.*) } { #5 } \g_item_structure_seq { % only <>
                \tl_set:Nn #1 { A }
                \tl_set:Nn #2 { \seq_item:Nn \g_item_structure_seq { 2 } }
                \tl_set:Nn #4 { \seq_item:Nn \g_item_structure_seq { 3 } }
            } {
                \regex_extract_once:nnNTF { \A\s*\[(.*?)\]\s*(.*) } { #5 } \g_item_structure_seq { % only []
                    \tl_set:Nn #1 { B }
                    \tl_set:No #3 { \seq_item:Nn \g_item_structure_seq { 2 } }
                    \tl_set:No #4 { \seq_item:Nn \g_item_structure_seq { 3 } }
                } { % only text
                    \tl_set:Nn #1 { N }
                    \tl_set:Nn #4 { #5 }
                }
            }
        }
    }
    % \tl_clear_new:N #1
    % \exp_args:NNx \tl_set:Nn #1 { \tl_use:N #1 }
    % \tl_clear_new:N #2
    % \exp_args:NNf \tl_set:Nn #2 { \tl_use:N #2 }
    % \tl_clear_new:N #3
    % \exp_args:NNf \tl_set:Nn #3 { \tl_use:N #3 }
    % \tl_clear_new:N #4
    % \exp_args:NNf \tl_set:Nn #4 { \tl_use:N #4 }
}
\cs_generate_variant:Nn \gather_item_parts:NNNNn { NNNNV }
\NewDocumentCommand{\PLTParseItem}{ m m m m +m }{
    \gather_item_parts:NNNNn { #1 } { #2 } { #3 } { #4 } { #5 }
}
\cs_generate_variant:Nn \gather_item_parts:NNNNn { NNNNV }
\NewDocumentCommand{\PLTParseItemFromMacro}{ m m m m +m }{
    \gather_item_parts:NNNNV { #1 } { #2 } { #3 } { #4 } { #5 }
}


\cs_generate_variant:Nn \clist_if_in:nnTF { nxTF }
% PLTIfType: choose code depending on type being in a list
% #1: type
% #2: list of types
% #3: code if type is in the list
% #4: code if not
\NewDocumentCommand{\PLTIfType}{ m m +m +m }{
    \clist_if_in:nxTF { #2 } { #1 } { #3 }{ #4 }
}

% PLTIfNotType: choose code depending on type being in a list
% #1: type
% #2: list of types
% #3: code if type is NOT in the list
% #4: code if it is
\NewDocumentCommand{\PLTIfNotType}{ m m +m +m }{
    \clist_if_in:nxTF { #2 } { #1 } { #4 } { #3 }
}

% filter_nested_environments: mark all internal \items
% #1: macro to hold the filtered token list
% #2: text to be filtered
\cs_new:Npn \mark_nested_items:Nn #1#2 {
    \tl_clear_new:N #1
    \tl_clear_new:N \l_input_tl
    \tl_set:Nn \l_input_tl { #2 }
    \tl_replace_all:Nnn \l_input_tl { ~ } { \c_space_tl }  % preserve spaces in input

    % Process token by token
    \int_zero_new:N \l_level_int
    \tl_clear_new:N \l_begin_tl
    \tl_set:Nn \l_begin_tl { \begin }
    \tl_clear_new:N \l_end_tl
    \tl_set:Nn \l_end_tl { \end }
    \tl_clear_new:N \l_item_tl
    \tl_set:Nn \l_item_tl { \item }
    \tl_clear_new:N \l_current_token_tl
    \tl_map_inline:Nn \l_input_tl {
        \tl_set:Nn \l_current_token_tl { ##1 }
        \tl_if_eq:NNTF \l_current_token_tl \l_begin_tl {
            \int_add:Nn \l_level_int { 1 }  % +1
        }{}
        \tl_if_eq:NNTF \l_current_token_tl \l_end_tl {
            \int_add:Nn \l_level_int { -1 }  % -1
        }{}
        \tl_if_eq:NNTF \l_current_token_tl \l_item_tl {
            \int_compare:nNnTF { \l_level_int } > { 0 } {
                \tl_put_right:Nn #1 { \@fake@item }  % mark as internal \item
            }{
                \tl_put_right:Nn #1 { \item }
            }
        }{
            \int_compare:nNnTF { \tl_count:N \l_current_token_tl } > { 1 } {
                \tl_put_right:Nn #1 { {##1} }
            }{
                \tl_put_right:Nn #1 { ##1 }
            }
        }
    }
    \tl_replace_all:Nnn #1 { \c_space_tl } { ~ }
}

% unmark_nested_items: unmark all items
% #1: macro to store the resulting token list
\cs_new:Npn \unmark_nested_items:N #1 {
    \tl_replace_all:Nnn #1 { \@fake@item } { \item }
}


% PLTGatherItems: splits a text in a list of separate items
% #1: text
%
% Sets global:
%   \g_eei_header_tl: text before first \item
%   \g_eei_items_seq: list with each \item text
\cs_new:Npn \gather_items:n #1 {
    % Mark nested enviroments \item tokens
    \mark_nested_items:Nn \l_filtered_tl { #1 }
    % Split items
    \seq_clear_new:N \g_eei_marked_items_seq
    \seq_set_split:NnV \g_eei_marked_items_seq { \item } \l_filtered_tl
    % Get header
    \tl_clear_new:N \g_eei_header_tl
    \seq_pop_left:NN \g_eei_marked_items_seq \g_eei_header_tl
    % Unmark previously marked \items
    \seq_clear_new:N \g_eei_items_seq
    \tl_clear_new:N \l_item_tl
    \seq_map_inline:Nn \g_eei_marked_items_seq {
        \tl_set:Nn \l_item_tl { ##1 }
        \unmark_nested_items:N \l_item_tl
        \seq_put_right:NV \g_eei_items_seq \l_item_tl
    }
}
\NewDocumentCommand{\PLTGatherItems}{ >{ \TrimSpaces } +m }{
    \gather_items:n { #1 }
}

% PLTMapCommand: execute a command on each \item
% #1: macro name to be used
\cs_new:Npn \map_command:N #1 {
    \seq_map_inline:Nn \g_eei_items_seq {
        #1 { ##1 }
    }
}
\NewDocumentCommand{\PLTMapCommand}{ m }{
    \map_command:N { #1 }
}

% PLTMapInline: execute an inline code on each \item; \PLTInlineItem is set
%   to each item; header is ignored
% #1: code
\cs_new:Npn \map_inline:N #1 {
    \tl_clear_new:N \PLTInlineItem
    \seq_map_inline:Nn \g_eei_items_seq {
        \tl_set:Nn \PLTInlineItem { ##1 }
        #1
    }
}
\NewDocumentCommand{\PLTMapInline}{ +m }{
    \map_inline:N { #1 }
}


% PLTGetHeader: returns the text before first \item
\NewDocumentCommand{\PLTGetHeader}{}{
    \tl_use:N \g_eei_header_tl
}

% PLTGetItem: returns the text for a single item
% #1: item number
\NewDocumentCommand{\PLTGetItem}{ m }{
    \seq_item:Nn \g_eei_items_seq { #1 }
}

\ExplSyntaxOff

\endinput


